<#@ template language="C#" hostspecific="true" #>
<#
  const int MinTuples = 2;
  const int MaxTuples = 8;
#>
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Linq;

namespace Sider
{
  public static class RedisClientPipeliningExtensions
  {
<#    for (int i = MinTuples; i < MaxTuples; i++) {
        var typeList = getTypeList(i);
#>
    public static Tuple<<#= typeList #>> Pipeline<TClient, <#= typeList #>>(
      this IRedisClient<TClient> client,
<#      for (int j = 1; j < i; j++) { #>
      Func<IRedisClient<TClient>, T<#= j #>> call<#= j #>,
<#      } #>
      Func<IRedisClient<TClient>, T<#= i #>> call<#= i #>) {

      var result = client.Pipeline(c =>
      {
<#      for (int j = 1; j <= i; j++) { #>
        call<#= j #>(c);
<#      } #>
      }).ToArray();

      return Tuple.Create(
<#      for (int j = 1; j < i; j++) { #>
        (T<#= j #>) result[<#= j - 1 #>],
<#      } #>
        (T<#= i #>) result[<#= i - 1 #>]);
    }

<#    } #>
  }
}

<#+
  string getTypeList(int count) 
  {
     var typeList = "";
     for (int i = 1; i < count; i++)
       typeList += "T" + i.ToString() + ", ";

     return typeList += "T" + count.ToString();
  }
#>